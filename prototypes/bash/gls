#!/bin/bash
# Generates header documentation for each file in the current directory based on information stored in the current git repository.
#
# Usage
#   Like ls
#     gls
#     gls *.sh
#     gls README.md LICENSE
#   Pipe to it
#     find | gls

# Author: Kevin Sandom <kevin.sandom@made.com>
# Date:   Fri May 27 12:42:33 BST 2016
# Repo:   git@github.com:madedotcom/gls.git
# File:   gls



# How to display stuff.
function displayFile
{
  fileName="$1"
  filePath=`getLocalPath`
  fileOrigin=`getFileOrigin "$repo"`

  echo "# Author: $author <$email>"
  echo "# Date:   $now"
  
  if [ "$fileOrigin" != '' ]; then
    echo "# Origin: $fileOrigin"
  fi
  
  echo "# Repo:   $repo"
  echo "# Branch: $branch"
  echo "# File:   $fileName"
  echo "# Root:   $repoRoot"
  echo "# Path:   $filePath"
  echo "# Account:$originAccount"
  echo "# Name:   $originName"
}

function displayDirectory
{
  echo "# DIRECTORY $1"
}

function displaySymlink
{
  echo "# SYMLINK $1"
}



# Functions for harvesting information
function getAuthor
{
  git config --global user.name
}

function getEmail
{
  git config --global user.email
}

function getRepo
{
  git config --local remote.origin.url
}

function getOriginDomain
{
  echo "$1" | cut -d@ -f 2 | cut -d: -f1
}

function getOriginAccount
{
  echo "$1" | cut -d: -f 2 | cut -d/ -f1
}

function getOriginName
{
  echo "$1" | sed 's#.*/##g' | cut -d. -f1
}

function getRepoRoot
{
  start=`pwd`
  subGetRepoRoot 0
  cd "$start"
}

function subGetRepoRoot
{
  count="$1"
  
  if [ -d .git ]; then # Found it!
    pwd
  elif [ "`pwd`" == '/' ]; then # stop if we get to root.
    false
  elif [ $count -gt 400 ]; then # Reached max count. Stop looking. If someone has this many levels of directories, they may have other problems.
    false
  else # Continue looking.
    cd ..
    let count=$count+1
    subGetRepoRoot $count
  fi
}

function getLocalPath
{
  pwd | sed "s#^$repoRoot##g"
}

function getFileOrigin
{
  domain=`getOriginDomain $1`
  
  case "$domain" in
    "github.com")
      echo "https://$domain/$originAccount/$originName/blob/master$filePath/$fileName"
    ;;
  esac
}

function getDate
{
  date +%Y-%m-%d
}

function getCurrentBranch
{
  git branch | grep '^\*' | cut -b 3-
}



# Process and choose appropriate display.
function processListing
{
  while read directoryItem;do
    if [ -f "$directoryItem" ]; then # File
      displayFile "$directoryItem"
    elif [ -d "$directoryItem" ]; then # Directory
      displayDirectory "$directoryItem"
    elif [ -h "$directoryItem" ]; then # Symlink
      displaySymlink "$directoryItem"
    fi
    
    echo
  done
}



# Flow
function likeLS
{
  ls "$@" | processListing
}

function chooseFlow
{
  if [ "$1" != '' ]; then
    likeLS "$@"
  elif [ ! -t 0 ]; then
    processListing
  else
    likeLS
  fi
}



# Collect information
author=`getAuthor`
email=`getEmail`
now=`getDate`
repo=`getRepo`
repoRoot=`getRepoRoot`
branch=`getCurrentBranch`
originAccount=`getOriginAccount "$repo"`
originName=`getOriginName "$repo"`


# Get started.
chooseFlow "$@"
