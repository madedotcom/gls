#!/bin/bash
# Copyright (C) Made.com Tech Team 2016  coders@made.com  http://www.made.com
#
# Author  Kevin Sandom <kevin.sandom@made.com>
# Date    2016-05-27
# Origin  https://github.com/madedotcom/gls/blob/master/prototypes/bash/gls
# Repo    git@github.com:madedotcom/gls.git
# Branch  master
# File    gls
#
# Purpose Generates header documentation for each file in the current directory based on information stored in the current git repository.
#
# Usage
#         Like ls
#           gls
#           gls *.sh
#           gls README.md LICENSE
#         Pipe to it
#           find | gls



# How to display stuff.
function displayFile
{
  fileName="$1"
  filePath=`getLocalPath`
  fileOrigin=`getFileOrigin "$repo"`

  echo -e "$commentColor#$copyrightColor Copyright (C) $accountName $year  $accountEmail  $accountBlog$default"
  echo -e "$commentColor#$default"
  echo -e "$commentColor# ${titleColor}Author  $valuesColor$author <$email>"
  echo -e "$commentColor# ${titleColor}Date    $valuesColor$now"
  
  if [ "$fileOrigin" != '' ]; then
    echo -e "$commentColor# ${titleColor}Origin  $valuesColor$fileOrigin"
  fi
  
  echo -e "$commentColor# ${titleColor}Repo    $valuesColor$repo"
  echo -e "$commentColor# ${titleColor}Branch  $valuesColor$branch"
  echo -e "$commentColor# ${titleColor}File    $fileColor$filePath/$directoryItem"
  echo -e "$commentColor#$default"
  echo -e "$commentColor# ${titleColor}Purpose ${irrelevantColor}TODO fill this in$default"
}

function displayDirectory
{
  echo -e "$irrelevantColor# DIRECTORY $1$default"
}

function displaySymlink
{
  echo -e "$irrelevantColor# SYMLINK $1$default"
}



# Functions for harvesting information
function getAuthor
{
  git config --global user.name
}

function getEmail
{
  git config --global user.email
}

function getRepo
{
  git config --local remote.origin.url
}

function getOriginDomain
{
  echo "$1" | cut -d@ -f 2 | cut -d: -f1
}

function getOriginAccount
{
  echo "$1" | cut -d: -f 2 | cut -d/ -f1
}

function getOriginName
{
  echo "$1" | sed 's#.*/##g' | cut -d. -f1
}

function getRepoRoot
{
  start=`pwd`
  subGetRepoRoot 0
  cd "$start"
}

function subGetRepoRoot
{
  count="$1"
  
  if [ -d .git ]; then # Found it!
    pwd
  elif [ "`pwd`" == '/' ]; then # stop if we get to root.
    false
  elif [ $count -gt 400 ]; then # Reached max count. Stop looking. If someone has this many levels of directories, they may have other problems.
    false
  else # Continue looking.
    cd ..
    let count=$count+1
    subGetRepoRoot $count
  fi
}

function getLocalPath
{
  pwd | sed "s#^$repoRoot##g"
}

function getFileOrigin
{
  domain=`getOriginDomain $1`
  
  case "$domain" in
    "github.com")
      echo "https://$domain/$originAccount/$originName/blob/master$filePath/$fileName"
    ;;
  esac
}

function getDate
{
  date +%Y-%m-%d
}

function getCurrentBranch
{
  git branch | grep '^\*' | cut -b 3-
}

function getGithubAccountDetails
{
  curl -s "https://api.github.com/users/$originAccount" > "$tmpPrefix-accountDetails"
}

function getAccountName
{
  grep "\"name\"" "$tmpPrefix-accountDetails" | cut -d\" -f4
}

function getAccountBlog
{
  grep "\"blog\"" "$tmpPrefix-accountDetails" | cut -d\" -f4
}

function getAccountEmail
{
  grep "\"email\"" "$tmpPrefix-accountDetails" | cut -d\" -f4
}

function cleanupTmp
{
  rm "$tmpPrefix*" 2> /dev/null
}

function getAccountDetails
{
  case "$domain" in
    "github.com")
      getGithubAccountDetails
    ;;
  esac
}



# Process and choose appropriate display.
function processListing
{
  while read directoryItem;do
    if [ -f "$directoryItem" ]; then # File
      displayFile "$directoryItem"
    elif [ -d "$directoryItem" ]; then # Directory
      displayDirectory "$directoryItem"
    elif [ -h "$directoryItem" ]; then # Symlink
      displaySymlink "$directoryItem"
    fi
    
    echo
  done
}



# Flow
function likeLS
{
  ls "$@" | processListing
}

function chooseFlow
{
  if [ "$1" != '' ]; then
    likeLS "$@"
  elif [ ! -t 0 ]; then
    processListing
  else
    likeLS
  fi
}



# Misc
function displayColorPallete
{
  echo -e "$blue blue $default"
  echo -e "$cyan cyan $default"
  echo -e "$green green $default"
  echo -e "$purple purple $default"
  echo -e "$gray gray $default"
  echo -e "$white white $default"
  echo -e "$lightBlue lightBlue $default"
  echo -e "$lightCyan lightCyan $default"
  echo -e "$lightGreen lightGreen $default"
  echo -e "$lightBlack lightBlack $default"
}




# Collect information
tmpPrefix=/tmp/$$-gls
author=`getAuthor`
email=`getEmail`
now=`getDate`
repo=`getRepo`
repoRoot=`getRepoRoot`
branch=`getCurrentBranch`
originAccount=`getOriginAccount "$repo"`
originName=`getOriginName "$repo"`
year=`date +%Y`
getGithubAccountDetails

accountName=`getAccountName`
accountBlog=`getAccountBlog`
accountEmail=`getAccountEmail`

cleanupTmp



# Colour Themeing
if [ -t 1 ]; then # We are in a terminal, use colour.
  default="\e[39m"
  blue="\e[34m"
  cyan="\e[36m"
  green="\e[32m"
  purple="\e[35m"
  yellow="\e[33m"
  gray="\e[37m"
  white="\e[97m"
  lightBlue="\e[94m"
  lightCyan="\e[96m"
  lightGreen="\e[92m"
  lightBlack="\e[90m"
  
  copyrightColor="$green"
  titleColor="$yellow"
  valuesColor="$cyan"
  fileColor="$lightBlack"
  commentColor="$lightBlack"
  fileColor="$gray"
  
  irrelevantColor="$lightBlack"
fi



# Get started.
chooseFlow "$@"
